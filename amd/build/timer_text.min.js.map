{"version":3,"sources":["timer_text.js"],"names":["define","$","strings","quizOpenTime","interval","key","component","set_strings","strs","init","selector","arguments","length","undefined","actionlink","cmid","sessionkey","attemptquiz","diffmillisecs","langstrings","method","name","value","type","class","id","divsection","append","prepend","form","prop","Date","getTime","this","update_time","bind","currentTime","datetxt","get_nice_duration","countDownTime","getElementById","innerHTML","get_string","hide","show","clearInterval","durationinseconds","months","usemonths","shortprecission","depth","durationstring","durationproms","Math","floor","days","hours","minutes","seconds","round","stop","push","join"],"mappings":"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","file":"timer_text.min.js","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implementaton of the quizaccess_delayed timer JScript.\n * Based on quizaccess_activateattempt https://github.com/IITBombayWeb/moodle-quizaccess_delayed/tree/v1.0.3\n *\n * @package   quizaccess_delayed\n * @author    Juan Pablo de Castro\n * @copyright 2020 University of Valladolid, Spain\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine( ['jquery'], function ($) {\n    var strings;\n    var quizOpenTime;\n    var interval;\n    return {\n        get_string: function (key, component, param = null) {\n            return strings[key];\n        },\n        set_strings: function (strs) {\n            strings = strs;\n        },\n        /**\n         * Init function.\n         */\n        init: function (selector = '.continuebutton', actionlink, cmid, sessionkey, attemptquiz, diffmillisecs, langstrings) {\n            if ($('.quizattempt #delayednotification').length > 0) {\n                return false;\n            }\n            // Initialize strings to avoid json requests.\n            this.set_strings(langstrings);\n            var form = $('<form/>', {\n                'method': 'post',\n                'action': actionlink\n            }).append(\n                $('<input>', {\n                    'type': 'hidden',\n                    'name': 'cmid',\n                    'value': cmid\n                }),\n                $('<input>', {\n                    'type': 'hidden',\n                    'name': 'sesskey',\n                    'value': sessionkey\n                }),\n                $('<input>', {\n                    'type': 'submit',\n                    'class': 'btn btn-secondary',\n                    'id': 'startAttemptButton',\n                    'value': attemptquiz\n                }));\n            var divsection = $('<div id=\"delayednotification\" />')\n                .append(\n                    $('<p>', {\n                        'id': 'activatedelayedtimer'\n                    }),\n                );\n            $(selector).prepend(form, $('</br>'));\n            // Insert above other buttons and messages.\n            $(selector).prepend(divsection);\n\n            $('[id=startAttemptButton]').prop('disabled', true);\n\n            quizOpenTime = new Date().getTime() + diffmillisecs;\n            interval = setInterval(this.update_time.bind(this), 1000);\n        },\n        update_time: function () {\n            var currentTime = new Date().getTime();\n            var countDownTime = quizOpenTime - currentTime;\n\n            var datetxt = this.get_nice_duration(countDownTime / 1000, true, false, 2);\n            document.getElementById('activatedelayedtimer').innerHTML =\n                this.get_string('quizwillstartinabout') + ' ' +\n                datetxt + ' ' +\n                this.get_string('pleasewait');\n\n            if (countDownTime < 0) {\n                $('#activatedelayedtimer').hide();\n                $('#startAttemptButton').show().prop('disabled', false);\n                clearInterval(interval);\n            }\n        },\n        /**\n         * Format a human-readable format for a duration in months or days and below.\n         * calculates from seconds to months.\n         * trim the details to the two more significant units\n         * @param int durationinseconds\n         * @param boolean usemonths if false render in days.\n         * @param boolean shortprecission if true only the most significative unit.\n         * @return string\n         */\n        get_nice_duration: function (durationinseconds, usemonths = true, shortprecission = false, depth = 2) {\n            var durationstring = '';\n            var durationproms = [];\n            var stop = false;\n            var durationinseconds;\n            var months;\n            if (usemonths) {\n                months = Math.floor(durationinseconds / (3600 * 24 * 30));\n                durationinseconds -= months * (3600 * 24 * 30);\n            }\n            var days = Math.floor(durationinseconds / (3600 * 24));\n            durationinseconds -= days * 3600 * 24;\n            var hours = Math.floor(durationinseconds / 3600);\n            durationinseconds -= hours * 3600;\n            var minutes = Math.floor(durationinseconds / 60);\n            var seconds = Math.round(durationinseconds - minutes * 60);\n\n            if (usemonths && months > 0) {\n                durationproms.push(months + this.get_string('month' + (months > 1 ? 's' : '')));\n                hours = 0;\n                minutes = 0;\n                seconds = 0;\n                if (shortprecission) {\n                    stop = true;\n                }\n            }\n            if (days > 0 && stop === false) {\n                durationproms.push(' ' + days + ' ' + this.get_string('day' + (days > 1 ? 's' : '')));\n                // Trim details less significant.\n                if (depth < 2) {\n                    minutes = 0;\n                    seconds = 0;\n                }\n                if (shortprecission) {\n                    stop = true;\n                }\n            }\n            if (hours > 0 && stop === false) {\n                durationproms.push(' ' + hours + ' ' + this.get_string('hour' + (hours > 1 ? 's' : '')));\n                if (depth < 2) {\n                    seconds = false;\n                }\n                if (shortprecission) {\n                    stop = true;\n                }\n            }\n            if (minutes > 0 && stop === false) {\n                durationproms.push(' ' + minutes + ' ' + this.get_string('minute' + (minutes > 1 ? 's' : '')));\n                if (shortprecission) {\n                    stop = true;\n                }\n            }\n            if (seconds > 0 && stop === false) {\n                durationproms.push(' ' + seconds + ' s.');\n            }\n            if (durationproms.length === 0) {\n                durationproms.push('-');\n            }\n            return durationproms.join('');\n        }\n    }\n}\n);"]}